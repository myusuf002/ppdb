<?php class jqGridDB { public static function getInterface() { return 'sqlsrv'; } public static function prepare ($conn, $sqlElement, $params, $bind=true) { if($conn && strlen($sqlElement)>0) { if(is_array($params) && count($params)>0) { for ($i = 0; $i < count($params); $i++) { $aprm[$i] = &$params[$i]; } } else { $aprm = $params; } $sql = sqlsrv_prepare( $conn, (string)$sqlElement, $aprm); if(!$sql) print_r(sqlsrv_errors(), true); return $sql; } return false; } public static function limit($sqlId, $dbtype, $nrows=-1,$offset=-1,$order='', $sort='' ) { $sql = $sqlId; $nrows = intval($nrows); if($nrows < 0) return false; $offset = intval($offset); if($offset < 0 ) return false; $orderby = $order && strlen($order) > 0; if ($orderby !== false) { $sort = (stripos($sort, 'desc') !== false) ? 'desc' : 'asc'; } $sql = preg_replace('/^SELECT\s+(DISTINCT\s)?/i', 'SELECT $1TOP ' . ($nrows+$offset) . ' ', $sql ); $sql = 'SELECT * FROM (SELECT TOP ' . $nrows . ' * FROM (' . $sql . ') AS inner_tbl'; if ($orderby !== false) { $sql .= ' ORDER BY ' . $order . ' '; $sql .= (stripos($sort, 'asc') !== false) ? 'DESC' : 'ASC'; } $sql .= ') AS outer_tbl'; if ($orderby !== false) { $sql .= ' ORDER BY ' . $order . ' ' . $sort; } return $sql; } public static function execute($psql, $prm=null) { $ret = false; if($psql) { $ret = sqlsrv_execute($psql); } return $ret; } public static function query($conn, $sql) { if($conn && strlen($sql)>0) { return sqlsrv_query( $conn, $sql); } return false; } public static function bindValues($stmt, $binds, $types) { return true; } public static function beginTransaction( $conn ) { if(sqlsrv_begin_transaction( $conn ) === false) { echo "Could not begin transaction.\n"; die( print_r( sqlsrv_errors(), true )); } } public static function commit( $conn ) { if(sqlsrv_commit( $conn ) === false) { echo "Could not commit transaction.\n"; die( print_r( sqlsrv_errors(), true )); } } public static function rollBack( $conn ) { if(sqlsrv_rollback( $conn ) === false) { echo "Could not Rollback transaction.\n"; die( print_r( sqlsrv_errors(), true )); } } public static function lastInsertId($conn, $table, $IdCol, $dbtype) { $sql = "SELECT SCOPE_IDENTITY()"; $stmt = sqlsrv_query( $conn, $sql); $idCol = false; if( $stmt === false ) { echo "Error in statement preparation/execution.\n"; die( print_r( sqlsrv_errors(), true)); } if( sqlsrv_fetch( $stmt ) === false ) { echo "Error in retrieving row.\n"; die( print_r( sqlsrv_errors(), true)); } $idCol = sqlsrv_get_field( $stmt, 0); return $idCol; } public static function fetch_object( $psql, $fetchall, $conn=null ) { if($psql) { if(!$fetchall) { return sqlsrv_fetch_object( $psql); } else { $ret = array(); while ($obj = sqlsrv_fetch_object( $psql)) { $ret[] = $obj; } return $ret; } } return false; } public static function fetch_num( $psql ) { if($psql) { return sqlsrv_fetch_array( $psql, SQLSRV_FETCH_NUMERIC); } return false; } public static function fetch_assoc( $psql, $conn ) { if($psql) { return sqlsrv_fetch_array( $psql, SQLSRV_FETCH_ASSOC ); } return false; } public static function closeCursor($sql) { if($sql) sqlsrv_free_stmt($sql); } public static function columnCount( $rs ) { if($rs) return sqlsrv_num_fields( $rs ); else return 0; } public static function getColumnMeta($index, $sql) { if($sql && $index >= 0) { $metaData = sqlsrv_field_metadata( $sql); if(isset($metaData[$index])) { $newmeta = $metaData[$index]; $newmeta["name"] = $newmeta["Name"]; unset($newmeta["Name"]); $newmeta["native_type"] = $newmeta["Type"]; unset($newmeta["Type"]); $newmeta["len"] = $newmeta["Size"]; unset($newmeta["Size"]); return $newmeta; } } return false; } public static function MetaType($t,$dbtype) { if ( is_array($t)) { $type = $t["native_type"]; $len = $t["len"]; switch($type) { case -11 : case -7 : case -5 : case -6 : case 4 : case 5 : return 'int'; case -152 : case -10 : case -9 : case -8 : case -1 : case 1 : case 12 : return 'string'; case -151 : case -4 : case -3 : return 'blob'; case -2 : return $len > 0 ? 'blob' : 'datetime'; case 91 : return 'date'; case -155 : case -154 : case 93 : return 'datetime'; default : return 'numeric'; } } return 'numeric'; } public static function getPrimaryKey($table, $conn, $dbtype) { $sql = "exec sp_columns @table_name = '".$table."'"; $stmt = self::query( $conn, $sql); if(!$stmt) { return false; } $result = array(); while($row = self::fetch_num( $stmt )){ $result[] = $row; } $owner = 1; $table_name = 2; $column_name = 3; $type_name = 5; $precision = 6; $length = 7; $scale = 8; $nullable = 10; $column_def = 12; $column_position = 16; if(count($result)==0) { return false; } self::closeCursor($stmt); $tableOwner = $result[0][$owner]; $sql = "exec sp_pkeys @table_owner = " . $tableOwner . ", @table_name = '".$table."'"; $stmt = self::query( $conn, $sql); if($stmt) { $primaryKeysResult = self::fetch_num( $stmt ); self::closeCursor($stmt); } $pkey_column_name = 3; $pkey_key_seq = 4; if($primaryKeysResult && $primaryKeysResult[$pkey_column_name]) return $primaryKeysResult[$pkey_column_name]; return false; } public static function errorMessage ( $conn ) { $errors = sqlsrv_errors(); return ($errors && is_array($errors)) ? "Code: ". $error['code'].". ".$error['message'] : "Unknown Error."; } } ?>
